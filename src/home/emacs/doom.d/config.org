* Extra Packages (on macOS)
#+begin_src emacs-lisp :tangle packages.el
(package! editorconfig)
(package! org-roam-ui)
(package! peep-dired)
(package! rainbow-mode)
(package! kurecolor)
(package! imenu-list)
(package! org-brain)
(package! org-ql)
(package! magit-todos)
(package! helm-org-rifle)
(package! org-edna)
(package! org-linker :recipe (:host github :repo "toshism/org-linker"))
(package! org-linker-edna :recipe (:host github :repo "toshism/org-linker-edna"))
(package! org-super-links :recipe (:host github :repo "toshism/org-super-links"))
(package! org-timeline)
(package! tldr)
(package! kubernetes)
(package! kubernetes-evil)
(unpin! code-review)
#+end_src

* Basic Configuration
#+begin_src emacs-lisp
(setq user-full-name "Tristan Schrader"
      user-mail-address "tristanschrader@proton.me"
      doom-theme 'doom-dracula
      delete-by-moving-to-trash t
      trash-directory "~/.Trash")
(map! "C-M-i" #'completion-at-point)
#+end_src

* Org Mode
#+begin_src emacs-lisp
(after! org
  (setq
    org-directory "~/Code/Personal/dev/knowledge/sabedoria"
    org-agenda-files (list (expand-file-name "agenda" org-directory))
    org-log-into-drawer t
    org-todo-keywords '(
      (sequence "DRAFTING(d@)" "PLANNED(p!)" "IN-PROGRESS(i!/@)" "WAITING(w@)" "|" "COMPLETED(c@)" "REJECTED(r@)" "MISSED(m@)")
    )
    org-todo-repeat-to-state "PLANNED"
    org-columns-default-format "%40ITEM(Task) %TODO %3PRIORITY %17Effort{:} %CLOCKSUM %CLOCKSUM_T %TAGS"
    org-agenda-columns-add-appointments-to-effort-sum t
    org-capture-templates '(
      ("w" "Work")
      ("wt" "Work" entry (file "agenda/work.org") "* %?\n" :clock-in t :clock-resume t)
      ("wm" "Meeting" entry (file "agenda/work.org") "* PLANNED %? :meeting:\n%T\n")
      ("." "Personal")
      (".t" "Task" entry (file "agenda/main.org") "* %?\n" :clock-in t :clock-resume t)
      (".m" "Meeting" entry (file "agenda/main.org") "* PLANNED %? :meeting:\n%T\n")
      ("b" "Bookmark" entry (file "bookmarks.org") "* %?\n")
    )
    org-id-link-to-org-use-id 'create-if-interactive-and-no-custom-id
    org-super-links-related-into-drawer t
    org-super-links-link-prefix 'org-super-links-link-prefix-timestamp
    org-super-links-search-function 'helm-org-ql-org-directory
    org-agenda-skip-scheduled-if-done t
    org-agenda-skip-deadline-if-done t
    org-agenda-include-diary t
    org-agenda-start-day nil
  )
  (map! :map org-mode-map
        :localleader
        "le" #'org-linker-edna
        "ll" #'org-super-links-link
        "li" #'org-super-links-insert-link
        "lI" #'org-super-links-quick-insert-inline-link
        "ls" #'org-super-links-store-link)
  (defun mark-as-project ()
    "This function makes sure that the current heading has
(1) the tag :project:
(2) has property COOKIE_DATA set to \"todo recursive\"
(3) has any TODO keyword and
(4) a leading progress indicator"
    (interactive)
    (org-toggle-tag "project" 'on)
    (org-set-property "COOKIE_DATA" "todo recursive")
    (org-back-to-heading t)
    (let*
      ((title (nth 4 (org-heading-components)))
       (keyword (nth 2 (org-heading-components)))
      )
      (when (and (bound-and-true-p keyword) (string-prefix-p "[" title))
        (message "TODO keyword and progress indicator found")
      )
      (when (and (not (bound-and-true-p keyword)) (string-prefix-p "[" title))
        (message "no TODO keyword but progress indicator found")
        (forward-whitespace 1)
        (insert "PLANNED ")
      )
      (when (and (not (bound-and-true-p keyword)) (not (string-prefix-p "[" title)))
        (message "no TODO keyword and no progress indicator found")
        (forward-whitespace 1)
        (insert "PLANNED [/] ")
      )
      (when (and (bound-and-true-p keyword) (not (string-prefix-p "[" title)))
        (message "TODO keyword but no progress indicator found")
        (forward-whitespace 2)
        (insert "[/] ")
      )
    )
  )
)

(defun my/org-habit-is-habit-subheading ()
  "Check if the current TODO is under an org-habit heading."
  (save-excursion
    (while (and (not (org-at-heading-p))
                (org-up-heading-safe))
      (let ((style (org-entry-get (point) "STYLE")))
        (when (and style (string= style "habit"))
          (cl-return t))))
    nil))

(defun my/org-agenda-remove-schedule ()
  "Remove SCHEDULED-cookie is switching state to WAITING."
  (save-excursion
    (and (equal org-state "COMPLETED")
         ;; (my/org-habit-is-habit-subheading)
         (org-get-scheduled-time (point))
         (when (search-forward-regexp org-scheduled-time-regexp nil t)
           (or (delete-region (match-beginning 0) (match-end 0)) t))
         (get-buffer "*Org Agenda*")
         (with-current-buffer "*Org Agenda*"
           (org-agenda-redo)))))

(defun my/org-clock-todo-change ()
  "Clock in on an in progress task and clock out of the other"
  (if (equal org-state "IN-PROGRESS")
      (org-clock-in)
    (org-clock-out-if-current)))

(add-hook! 'org-after-todo-stage-change-hook 'my/org-agenda-remove-schedule)
(add-hook! 'org-after-todo-state-change-hook 'my/org-clock-todo-change)
(add-hook! org-mode
           (org-edna-mode)
           (require 'org-linker-edna))
#+end_src

* Vterm
** Key bindings
#+begin_src emacs-lisp
(after! vterm
  (map! :map vterm-mode-map "C-c ESC" #'vterm-send-escape)
  (defun vterm-ssh (host)
    (vterm)
    (vterm-send-string (concat "ssh " host "\n")))
  (defun vterm-ssh-tramp ()
    (interactive)
    (let ((host (file-remote-p default-directory 'host)))
      (if host
          (vterm-ssh host)
        (message "Not in a TRAMP buffer")))))
#+end_src

* ssh-deploy
#+begin_src emacs-lisp
(after! ssh-deploy
  (ssh-deploy-line-mode)
  (ssh-deploy-add-menu)
  (ssh-deploy-add-after-save-hook)
  (ssh-deploy-add-find-file-hook)
  (advice-add #'turn-on-evil-mode :before
              (lambda (&optional args)
                (when (eq major-mode 'fundamental-mode)
                  (hack-local-variables)))))
#+end_src

* Dired
#+begin_src emacs-lisp
(map! :map dired-mode-map
      "h" #'dired-up-directory
      "l" #'dired-view-file
      "x" #'dired-do-kill-lines
      "dp" #'peep-dired :desc "Peep-dired image previews")
#+end_src

* Magit
** General
#+begin_src emacs-lisp
;; Put forge tokens in ~/.netrc
(setq auth-sources '("~/.netrc"))
(after! magit
  ;; Enable granular diff-highlights for all hunks
  (setq magit-diff-refine-hunk 'all))
#+end_src
** Code Review
#+begin_src emacs-lisp
;; Line wrap in comments
(setq code-review-fill-column 80)
;; Use same passwords used for forge
(setq code-review-auth-login-marker 'forge)
;; Jump into code review from a magit-forge PR view
(map! :after forge
      :map forge-topic-mode-map
      "rr" #'code-review-forge-pr-at-point)
;; Show *Code Review* in current workspace (Doom bug)
(add-hook 'code-review-mode-hook (lambda () (persp-add-buffer (current-buffer))))
;; Show pretty symbols
(add-hook 'code-review-mode-hook #'emojify-mode)
#+end_src

* Tools
** tree-sitter
*** enable highlighting in all modes
#+begin_src emacs-lisp
(setq +tree-sitter-hl-enabled-modes t)
#+end_src
** lookup
*** add another websites for quick search
#+begin_src emacs-lisp
(add-to-list '+lookup-provider-url-alist '("Wiktionary" . "https://en.wiktionary.org/wiki/%s"))
#+end_src
