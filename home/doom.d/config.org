* Extra Packages (on macOS)
#+begin_src emacs-lisp :tangle packages.el
(package! editorconfig)
(package! org-roam-ui)
(package! peep-dired)
(package! rainbow-mode)
(package! kurecolor)
(package! imenu-list)
(package! org-brain)
(package! org-ql)
(package! org-super-links :recipe (:host github :repo "toshism/org-super-links"))
(package! tldr)
(package! kubernetes)
(package! kubernetes-evil)
#+end_src

* Basic Configuration
#+begin_src emacs-lisp
(setq user-full-name "Tristan Schrader"
      user-mail-address "tristanschrader@proton.me"
      doom-theme 'doom-dracula
      delete-by-moving-to-trash t
      trash-directory "~/.Trash")
(map! "C-M-i" #'completion-at-point)
#+end_src

* Org Mode
#+begin_src emacs-lisp
(after! org
  (setq
    org-directory "~/Code/Personal/dev/knowledge/sabedoria"
    org-agenda-files (list (expand-file-name "agenda" org-directory))
    org-log-done 'note
    org-todo-keywords '(
      (sequence "DRAFTED(d)" "PLANNED(p)" "IN-PROGRESS(i)" "ON-HOLD(h)" "|" "COMPLETED(c)" "ABANDONED(a)")
    )
    org-capture-templates '(
      ("w" "Work")
      ("wt" "Work" entry (file "agenda/work.org") "* %?\n" :clock-in t :clock-resume t)
      ("wm" "Meeting" entry (file "agenda/work.org") "* PLANNED %? :meeting:\n%T\n")
      ("." "Personal")
      (".t" "Task" entry (file "agenda/main.org") "* %?\n" :clock-in t :clock-resume t)
      (".m" "Meeting" entry (file "agenda/main.org") "* PLANNED %? :meeting:\n%T\n")
      ("b" "Bookmark" entry (file "bookmarks.org") "* %?\n")
    )
    org-id-link-to-org-use-id 'create-if-interactive-and-no-custom-id
    org-super-links-related-into-drawer t
    org-super-links-link-prefix 'org-super-links-link-prefix-timestamp
    org-super-links-search-function 'helm-org-ql-org-directory
  )
  (evil-define-key 'normal org-mode-map
    (kbd "SPC mls") 'org-super-links-store-link
    (kbd "SPC mli") 'org-super-links-insert-link
    (kbd "SPC mlI") 'org-super-links-quick-insert-inline-link
    (kbd "SPC mll") 'org-super-links-link
  )
  (defun mark-as-project ()
    "This function makes sure that the current heading has
(1) the tag :project:
(2) has property COOKIE_DATA set to \"todo recursive\"
(3) has any TODO keyword and
(4) a leading progress indicator"
    (interactive)
    (org-toggle-tag "project" 'on)
    (org-set-property "COOKIE_DATA" "todo recursive")
    (org-back-to-heading t)
    (let*
      ((title (nth 4 (org-heading-components)))
       (keyword (nth 2 (org-heading-components)))
      )
      (when (and (bound-and-true-p keyword) (string-prefix-p "[" title))
        (message "TODO keyword and progress indicator found")
      )
      (when (and (not (bound-and-true-p keyword)) (string-prefix-p "[" title))
        (message "no TODO keyword but progress indicator found")
        (forward-whitespace 1)
        (insert "PLANNED ")
      )
      (when (and (not (bound-and-true-p keyword)) (not (string-prefix-p "[" title)))
        (message "no TODO keyword and no progress indicator found")
        (forward-whitespace 1)
        (insert "PLANNED [/] ")
      )
      (when (and (bound-and-true-p keyword) (not (string-prefix-p "[" title)))
        (message "TODO keyword but no progress indicator found")
        (forward-whitespace 2)
        (insert "[/] ")
      )
    )
  )
)
#+end_src

* Vterm
** Key bindings
#+begin_src emacs-lisp
(after! vterm
  (evil-define-key 'normal vterm-mode-map (kbd "C-c ESC") #'vterm-send-escape))
#+end_src

* Dired
#+begin_src emacs-lisp
(map! :leader
      (:after dired
       (:map dired-mode-map
        :desc "Peep-dired image previews" "d p" #'peep-dired)))

(evil-define-key 'normal dired-mode-map
  (kbd "h") 'dired-up-directory
  (kbd "l") 'dired-view-file
  (kbd "x") 'dired-do-kill-lines
)
#+end_src

* Magit
** General
#+begin_src emacs-lisp
;; Put forge tokens in ~/.netrc
(setq auth-sources '("~/.netrc"))
(after! magit
  ;; Enable granular diff-highlights for all hunks
  (setq magit-diff-refine-hunk 'all))
#+end_src
** Code Review
#+begin_src emacs-lisp
;; Line wrap in comments
(setq code-review-fill-column 80)
;; Use same passwords used for forge
(setq code-review-auth-login-marker 'forge)
;; Jump into code review from a magit-forge PR view
(after! forge
  (define-key forge-topic-mode-map (kbd "rr") 'code-review-forge-pr-at-point))
;; Show *Code Review* in current workspace (Doom bug)
(add-hook 'code-review-mode-hook (lambda () (persp-add-buffer (current-buffer))))
;; Show pretty symbols
(add-hook 'code-review-mode-hook #'emojify-mode)
#+end_src

* Tools
** tree-sitter
*** enable highlighting in all modes
#+begin_src emacs-lisp
(setq +tree-sitter-hl-enabled-modes t)
#+end_src
** lookup
*** add another websites for quick search
#+begin_src emacs-lisp
(add-to-list '+lookup-provider-url-alist '("Wiktionary" . "https://en.wiktionary.org/wiki/%s"))
#+end_src
